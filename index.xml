<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Zekun's Zone</title><link>https://zekun-li.github.io/</link><description>Recent content on Zekun's Zone</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 27 Mar 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://zekun-li.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>Two Github Accounts with Two SSH Keys</title><link>https://zekun-li.github.io/posts/github-keys/</link><pubDate>Mon, 27 Mar 2023 00:00:00 +0000</pubDate><guid>https://zekun-li.github.io/posts/github-keys/</guid><description>To use two different GitHub accounts, one for work and one for personal use, you will need to create two separate RSA keys.
Create Two RSA keys Here are the steps to create two RSA keys:
Open your terminal.
Input the following command, replacing &amp;ldquo;email@example.com&amp;rdquo; with your email address:
ssh-keygen -t rsa -C &amp;quot;[email@example.com](mailto:email@example.com)&amp;quot;
When asked to enter a file in which to save the key, type in a unique name for each key.</description></item><item><title>ChatGPT for Novel Translation</title><link>https://zekun-li.github.io/posts/chatgpt-translation/</link><pubDate>Sat, 25 Mar 2023 00:00:00 +0000</pubDate><guid>https://zekun-li.github.io/posts/chatgpt-translation/</guid><description>ChatGPT is a powerful and versatile large language model that can assist in many NLP tasks. One such task is translation, and in this blog post, we will show you how to use ChatGPT to translate Chinese web novels into English.
Step 1: Create an OpenAI account Before you can use the ChatGPT model for novel translation, you need to create an OpenAI account to obtain an API key. This key will grant you access to the platform&amp;rsquo;s powerful tools and resources, including the ChatGPT model.</description></item><item><title>Raspberry Pi Timelapse Video</title><link>https://zekun-li.github.io/posts/pi-timelapse/</link><pubDate>Mon, 14 Nov 2022 00:00:00 +0000</pubDate><guid>https://zekun-li.github.io/posts/pi-timelapse/</guid><description>Recording a timelapse video of a sunset can be a fantastic way to capture the beauty of nature in a condensed form. Without a bulky professional camera, you can still record a timelapse video with Raspberry Pi easily. In this blog post, we&amp;rsquo;ll introduce the raspistill and ffmepg command for creating videos.
We can take a look at a demo video shot with pi-camera v1.3 on Raspberry Pi. It was a maganificant sunset in Minnesota.</description></item><item><title>Raspberry Pi Connect To WIFI with Command</title><link>https://zekun-li.github.io/posts/pi-connect-wifi/</link><pubDate>Thu, 14 Oct 2021 00:00:00 +0000</pubDate><guid>https://zekun-li.github.io/posts/pi-connect-wifi/</guid><description>If you have an extra monitor, keyboard and mouse, then connecting Rapsberry Pi to WIFI is really easy. You just click a few buttons in the GUI and you&amp;rsquo;re done. However, these gadgets are not always handy. In this case, you will need to connect the Pi with WIFI with command line. This blog shows you how to do it.
Things to prepare: Ethernet Cable A device with network connectivity (mine is MacBook) Steps On the WIFI-connected device, type ifconfig | grep broadcast | arp -a.</description></item><item><title>Connect to Remote Server with VSCode</title><link>https://zekun-li.github.io/posts/server-vscode/</link><pubDate>Mon, 04 Oct 2021 00:00:00 +0000</pubDate><guid>https://zekun-li.github.io/posts/server-vscode/</guid><description>This blog has the video tutorials of the following two things:
Connect to UMN MSI server with VSCode Use UMN MSI with GPU</description></item><item><title>Run jupyter notebook in docker container on remote server</title><link>https://zekun-li.github.io/posts/server-jupyter-docker/</link><pubDate>Sun, 08 Aug 2021 00:00:00 +0000</pubDate><guid>https://zekun-li.github.io/posts/server-jupyter-docker/</guid><description>Jupyter notebook is an extremely convieninent tool for debugging a piece of code. It runs on browser and allows you to run code piece by piece instead of fresh from the begining. With docker, jupyter notebook is slightly more confusing than it is on local machine. This short article talks about how to correctly forward the port to run jupyter notebook in docker container on remote server.
We will have three locations to deal with; local machine, remote server, docker container.</description></item><item><title>Common Commands</title><link>https://zekun-li.github.io/posts/common-commands/</link><pubDate>Tue, 05 Jan 2021 00:00:00 +0000</pubDate><guid>https://zekun-li.github.io/posts/common-commands/</guid><description>Add python2 kernels to jupyter notebook: (source: https://ipython.readthedocs.io/en/stable/install/kernel_install.html)
python2 -m pip install ipykernel python2 -m ipykernel install --user Add python3 kernels to jupyter notebook: python3 -m pip install ipykernel python3 -m ipykernel install --user AttributeError: module &amp;lsquo;matplotlib.colors&amp;rsquo; has no attribute &amp;rsquo;to_rgba&amp;rsquo; Update matplotlib
python3 -m pip install --upgrade matplotlib Customized Datagenerator having AttributeError: ‘ProgbarLogger’ object has no attribute ‘log_values’ Check if the data generator could not load data correctly (0 sample)</description></item><item><title>Dual Monitors with Ubuntu 16.04 LTS</title><link>https://zekun-li.github.io/posts/dual-monitor/</link><pubDate>Tue, 05 Jan 2021 00:00:00 +0000</pubDate><guid>https://zekun-li.github.io/posts/dual-monitor/</guid><description>Ubuntu 16.04 default dual monitor setting sometimes doesn&amp;rsquo;t work if you have one monitor placed in vertical position. In this case, the easiest way would be configure it manually.
If your second monitor is still black after plugged in the HMDI cable, remember to check the Display setting, the second monitor should be turned &amp;ldquo;On&amp;rdquo;.
First you should download the CompizConfig Settings Manager. The installation guide can be found here.</description></item><item><title>Stop SSH connection from timeout</title><link>https://zekun-li.github.io/posts/ssh-timeout/</link><pubDate>Tue, 05 Jan 2021 00:00:00 +0000</pubDate><guid>https://zekun-li.github.io/posts/ssh-timeout/</guid><description>When you&amp;rsquo;re connecting to the server, sometimes you got &amp;ldquo;Broken Pipe&amp;rdquo; prompt that kicks you off from the server if you are not active for a while. This can be quite annoying if you have unsaved changes in the code and was just away for a bit searching for some solution. This can be stopped from happening if you could change the ssh configuration on the server.
Open the file /etc/ssh/sshd_config on server and add the following lines in the end.</description></item><item><title>Display JPEG historical map tiles in Mapbox</title><link>https://zekun-li.github.io/posts/mapbox/</link><pubDate>Sat, 02 Jan 2021 00:00:00 +0000</pubDate><guid>https://zekun-li.github.io/posts/mapbox/</guid><description>Mapbox is a great tool for visualizing maps especially when you have multiple layers and would like to compare them at the same location.
In my case, I have millions of small tiles in jpeg format, and I would like to overlay those tiles on OSM map. Those map tiles are generated from a neural network by taking OSM tiles as input and the resulting tiles are close to historical style.</description></item><item><title>Experience with Mapnik</title><link>https://zekun-li.github.io/posts/mapnik/</link><pubDate>Sat, 05 Sep 2020 00:00:00 +0000</pubDate><guid>https://zekun-li.github.io/posts/mapnik/</guid><description>For some reason, I needed to use mapnik to render the .osm file into tiles (png format), and I started my long journey with mapnik. The task is to render the text label layer only, without any background geographical features.
Things started off smoothly. I found python already have pip installation for mapnik so I simply typed pip install mapnik to install it on my machine. I followed the tutorial here and successfully reproduced the output.</description></item><item><title>CUDA Errors and Solutions</title><link>https://zekun-li.github.io/posts/cuda-error/</link><pubDate>Mon, 08 Jun 2020 08:06:25 +0600</pubDate><guid>https://zekun-li.github.io/posts/cuda-error/</guid><description>CUDA is a parallel computing model created by Nvidia to assist the usage of GPU. It is widely used in the training of deep-learning models. It greatly speed up the computation in model training compared with its CPU-based counterpart. However we might encouter problems when using it, and here is a summarization of some common problems and the solutions. Please note that this post is not emphasizing on the installation of CUDA.</description></item><item><title>Clean up boot directory when full</title><link>https://zekun-li.github.io/posts/clean-boot-dir/</link><pubDate>Thu, 30 Jan 2020 00:00:00 +0000</pubDate><guid>https://zekun-li.github.io/posts/clean-boot-dir/</guid><description>When /boot directory is full, errors will occur if we try to install new packages or libraries. Here is a short blog showing how to clean up /boot space by getting rid of outdated kernel files).
Identify the current kernel version Use the command below
uname -r For me it’s showing up 4.4.25-040425-generic
List all the files and folders in /boot directory
ls /boot/ Then you will see lots of old kernels.</description></item><item><title>Go পরিচিতি</title><link>https://zekun-li.github.io/notes/go/basic/introduction/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zekun-li.github.io/notes/go/basic/introduction/</guid><description> Hello World A sample go program is show here.
package main import &amp;#34;fmt&amp;#34; func main() { message := greetMe(&amp;#34;world&amp;#34;) fmt.Println(message) } func greetMe(name string) string { return &amp;#34;Hello, &amp;#34; + name + &amp;#34;!&amp;#34; } Run the program as below:
$ go run hello.go Variables Normal Declaration:
var msg string msg = &amp;#34;Hello&amp;#34; Shortcut:
msg := &amp;#34;Hello&amp;#34; Constants const Phi = 1.618</description></item><item><title>Go বেসিক</title><link>https://zekun-li.github.io/notes/go/basic/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zekun-li.github.io/notes/go/basic/</guid><description/></item><item><title>অ্যাডভান্সড</title><link>https://zekun-li.github.io/notes/go/advanced/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zekun-li.github.io/notes/go/advanced/</guid><description/></item><item><title>বেসিক টাইপ সমূহ</title><link>https://zekun-li.github.io/notes/go/basic/types/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zekun-li.github.io/notes/go/basic/types/</guid><description>Strings str := &amp;#34;Hello&amp;#34; Multiline string
str := `Multiline string` Numbers Typical types
num := 3 // int num := 3. // float64 num := 3 + 4i // complex128 num := byte(&amp;#39;a&amp;#39;) // byte (alias for uint8) Other Types
var u uint = 7 // uint (unsigned) var p float32 = 22.7 // 32-bit float Arrays // var numbers [5]int numbers := [...]int{0, 0, 0, 0, 0} Pointers func main () { b := *getPointer() fmt.</description></item><item><title>Flow Control</title><link>https://zekun-li.github.io/notes/go/basic/flow-control/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zekun-li.github.io/notes/go/basic/flow-control/</guid><description>Condition if day == &amp;#34;sunday&amp;#34; || day == &amp;#34;saturday&amp;#34; { rest() } else if day == &amp;#34;monday&amp;#34; &amp;amp;&amp;amp; isTired() { groan() } else { work() } if _, err := doThing(); err != nil { fmt.Println(&amp;#34;Uh oh&amp;#34;) Switch switch day { case &amp;#34;sunday&amp;#34;: // cases don&amp;#39;t &amp;#34;fall through&amp;#34; by default! fallthrough case &amp;#34;saturday&amp;#34;: rest() default: work() } Loop for count := 0; count &amp;lt;= 10; count++ { fmt.Println(&amp;#34;My counter is at&amp;#34;, count) } entry := []string{&amp;#34;Jack&amp;#34;,&amp;#34;John&amp;#34;,&amp;#34;Jones&amp;#34;} for i, val := range entry { fmt.</description></item><item><title>ফাইল ম্যানিপুলেশন</title><link>https://zekun-li.github.io/notes/go/advanced/files/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zekun-li.github.io/notes/go/advanced/files/</guid><description> Condition if day == &amp;#34;sunday&amp;#34; || day == &amp;#34;saturday&amp;#34; { rest() } else if day == &amp;#34;monday&amp;#34; &amp;amp;&amp;amp; isTired() { groan() } else { work() } if _, err := doThing(); err != nil { fmt.Println(&amp;#34;Uh oh&amp;#34;)</description></item><item><title>Bash Variables</title><link>https://zekun-li.github.io/notes/bash/basic/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zekun-li.github.io/notes/bash/basic/</guid><description> Variable NAME=&amp;#34;John&amp;#34; echo $NAME echo &amp;#34;$NAME&amp;#34; echo &amp;#34;${NAME} Condition if [[ -z &amp;#34;$string&amp;#34; ]]; then echo &amp;#34;String is empty&amp;#34; elif [[ -n &amp;#34;$string&amp;#34; ]]; then echo &amp;#34;String is not empty&amp;#34; fi</description></item><item><title>Go এর নোট সমূহ</title><link>https://zekun-li.github.io/notes/go/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zekun-li.github.io/notes/go/</guid><description>Go Notes</description></item></channel></rss>