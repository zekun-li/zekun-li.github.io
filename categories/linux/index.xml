<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>linux on Zekun's Zone</title><link>https://zekun-li.github.io/categories/linux/</link><description>Recent content in linux on Zekun's Zone</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 04 Oct 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://zekun-li.github.io/categories/linux/index.xml" rel="self" type="application/rss+xml"/><item><title>Connect to Remote Server with VSCode</title><link>https://zekun-li.github.io/posts/server-vscode/</link><pubDate>Mon, 04 Oct 2021 00:00:00 +0000</pubDate><guid>https://zekun-li.github.io/posts/server-vscode/</guid><description>This blog has the video tutorials of the following two things:
Connect to UMN MSI server with VSCode Use UMN MSI with GPU</description></item><item><title>Run jupyter notebook in docker container on remote server</title><link>https://zekun-li.github.io/posts/server-jupyter-docker/</link><pubDate>Sun, 08 Aug 2021 00:00:00 +0000</pubDate><guid>https://zekun-li.github.io/posts/server-jupyter-docker/</guid><description>Jupyter notebook is an extremely convieninent tool for debugging a piece of code. It runs on browser and allows you to run code piece by piece instead of fresh from the begining. With docker, jupyter notebook is slightly more confusing than it is on local machine. This short article talks about how to correctly forward the port to run jupyter notebook in docker container on remote server.
We will have three locations to deal with; local machine, remote server, docker container.</description></item><item><title>Common Commands</title><link>https://zekun-li.github.io/posts/common-commands/</link><pubDate>Tue, 05 Jan 2021 00:00:00 +0000</pubDate><guid>https://zekun-li.github.io/posts/common-commands/</guid><description>Add python2 kernels to jupyter notebook: (source: https://ipython.readthedocs.io/en/stable/install/kernel_install.html)
python2 -m pip install ipykernel python2 -m ipykernel install --user Add python3 kernels to jupyter notebook: python3 -m pip install ipykernel python3 -m ipykernel install --user AttributeError: module &amp;lsquo;matplotlib.colors&amp;rsquo; has no attribute &amp;rsquo;to_rgba&amp;rsquo; Update matplotlib
python3 -m pip install --upgrade matplotlib Customized Datagenerator having AttributeError: ‘ProgbarLogger’ object has no attribute ‘log_values’ Check if the data generator could not load data correctly (0 sample)</description></item><item><title>Stop SSH connection from timeout</title><link>https://zekun-li.github.io/posts/ssh-timeout/</link><pubDate>Tue, 05 Jan 2021 00:00:00 +0000</pubDate><guid>https://zekun-li.github.io/posts/ssh-timeout/</guid><description>When you&amp;rsquo;re connecting to the server, sometimes you got &amp;ldquo;Broken Pipe&amp;rdquo; prompt that kicks you off from the server if you are not active for a while. This can be quite annoying if you have unsaved changes in the code and was just away for a bit searching for some solution. This can be stopped from happening if you could change the ssh configuration on the server.
Open the file /etc/ssh/sshd_config on server and add the following lines in the end.</description></item><item><title>CUDA Errors and Solutions</title><link>https://zekun-li.github.io/posts/cuda-error/</link><pubDate>Mon, 08 Jun 2020 08:06:25 +0600</pubDate><guid>https://zekun-li.github.io/posts/cuda-error/</guid><description>CUDA is a parallel computing model created by Nvidia to assist the usage of GPU. It is widely used in the training of deep-learning models. It greatly speed up the computation in model training compared with its CPU-based counterpart. However we might encouter problems when using it, and here is a summarization of some common problems and the solutions. Please note that this post is not emphasizing on the installation of CUDA.</description></item><item><title>Clean up boot directory when full</title><link>https://zekun-li.github.io/posts/clean-boot-dir/</link><pubDate>Thu, 30 Jan 2020 00:00:00 +0000</pubDate><guid>https://zekun-li.github.io/posts/clean-boot-dir/</guid><description>When /boot directory is full, errors will occur if we try to install new packages or libraries. Here is a short blog showing how to clean up /boot space by getting rid of outdated kernel files).
Identify the current kernel version Use the command below
uname -r For me it’s showing up 4.4.25-040425-generic
List all the files and folders in /boot directory
ls /boot/ Then you will see lots of old kernels.</description></item></channel></rss>